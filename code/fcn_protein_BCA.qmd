---
title: "fcn_protein_BCA"
format: html
editor: visual
---


# Preparations

##Load libraries
```{r Preperations}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse) #for data wrangling
library(cmdstanr)   #for cmdstan
library(brms)       #for fitting models in STAN
library(standist)   #for visualizing distributions
library(HDInterval) #for HPD intervals
library(posterior)  #for posterior draws
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
library(ggmcmc)     #for MCMC diagnostics
library(rstan)      #for interfacing with STAN
library(effects)   #for partial effects plots
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(tidybayes)
library(broom.mixed)#for tidying MCMC outputs
library(patchwork)  #for multiple plots
library(ggeffects)
library(DHARMa)
library(ggridges)
library(bayestestR) #for ROPE
library(see)        #for some plots
library(easystats)     #framework for stats, modelling and visualisation 
library(dplyr)
library(scales)
source('../helperFunctions.R') 
```

##Read in data
```{r readData, results='markdown', eval=TRUE}
zoox_full <- read_csv('../data/corals_zoox.csv', trim_ws = TRUE)

zoox_full <- zoox_full |> mutate(treatment = factor(treatment),
                       tank_rep_rand = factor(tank_rep_rand), 
                       genotype = factor(genotype), 
                       fragment = factor(fragment))  

zoox_aten <- zoox_full |> dplyr::filter(species=="aten") |> droplevels() 
zoox_pdae <- zoox_full |> dplyr::filter(species=="pdae") |> droplevels() 
zoox_plut <- zoox_full |> dplyr::filter(species=="plut") |> droplevels() 
zoox_pver <- zoox_full |> dplyr::filter(species=="pver") |> droplevels() 

```

##Load models
```{r}
load("../models/pver.proteinSA.brm6.RData")
load("../models/aten.proteinSA.brm4.RData")

```

##Visualisation
```{r}
#| label: Visualisation_set-up
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

group.colors <- c(Control = "#999999", Dissolved = "#E69F00", Fish = "#56B4E9", LiveFeeds = "#009E73", Mix = "#F0E442", Pellets = "#0072B2", Field = "#D55E00", SeaSim = "#CC79A7" )

level_order_new <- c('Control','Pellets', 'LiveFeeds', 'Mix', 'Fish','Dissolved', 'Field', 'SeaSim')
level_order_new_nams <- c('Control','Pellets', 'LiveFeeds', 'LiveFeeds + Fish', 'Fish', 'Dissolved',  'Field', 'Post - acclimation') 

```

#Pver

## Fit the model
###Treatment + tank model  
####Priors model

```{r}
#| label: tank_rand_model_1_pver
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

pver.proteinSA.form3 <- bf(protein_ugSA ~ treatment + (1|tank_rep_rand), family = gaussian())

   priors <- prior(normal(315, 12), class = 'Intercept') + 
     prior(normal(0, 300), class = 'b') + 
     prior(student_t(3, 0, 12), class = 'sd') + 
     prior(student_t(3, 0, 12), class = 'sigma')

pver.proteinSA.brm5 <- brm(pver.proteinSA.form3, 
                 data = zoox_pver,
                 prior = priors, 
                 sample_prior = 'only',
                 iter = 5000, 
                 warmup = 2500, 
                 chains = 3, cores = 3, 
                 thin = 5, 
                 refresh = 0, 
                 seed = 123, 
                 control = list(adapt_delta = 0.99),
                 backend = "cmdstan") 

pver.proteinSA.brm5 |> conditional_effects("treatment") |> plot(points = TRUE)   
#OK 
```

####With data

```{r}
#| label: tank_rand_model_2_pver
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

pver.proteinSA.brm6 <- pver.proteinSA.brm5 |> update(sample_prior = "yes",
                                       refresh = 0,
                                       control = list(adapt_delta = 0.99),
                                       seed = 123) 
ver.proteinSA.brm6 |> conditional_effects("treatment") |> plot(points = TRUE)
#OK
```

####MCMC sampling diagnostics

```{r}
#| label: tank_rand_model_3_pver
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: true 
pars <- pver.proteinSA.brm6 |> get_variables()
pars_2 <- str_extract(pars, '^b_.*|^sd_.*|^shape*|^sigma$') |> na.omit() 

#Traceplots
pver.proteinSA.brm6$fit |> stan_trace(pars = pars_2, inc_warmup = TRUE)
#good 

#Autocorrelation
pver.proteinSA.brm6$fit |> stan_ac(pars = pars_2) 
#good

#Rhat
pver.proteinSA.brm6$fit |> stan_rhat()
#good

#ESS
pver.proteinSA.brm6$fit |> stan_ess() 
#good

summary(pver.proteinSA.brm6) 
#good

```

####Posterior probablity checks

```{r}
#| label: tank_rand_model_4_pver
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

pver.proteinSA.brm6 |> pp_check(type = 'dens_overlay', ndraws = 200) + theme_classic()

```

####DHARMA residuals

```{r}
#| label: tank_rand_model_5_pver
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

coral.resids <- make_brms_dharma_res(pver.proteinSA.brm6, integerResponse = FALSE)

wrap_elements(~testUniformity(coral.resids)) + 
  wrap_elements(~plotResiduals(coral.resids, form = factor(rep(1, nrow(zoox_pver))))) +
  wrap_elements(~plotResiduals(coral.resids, quantreg = FALSE)) +
  wrap_elements(~testDispersion(coral.resids))
```

###Model Investigations 
#####Summary
```{r}
#| label: model_investigations_1_pver
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

pver.proteinSA.brm6 |> 
  as_draws_df() |> 
  dplyr::select(matches('^b_.*|^sigma$|^sd.*')) |> 
  summarise_draws(median, 
                  ~ HDInterval::hdi(.x, .width = 0.95),  
                  Pl = ~ mean(.x < 0), 
                  Pg = ~ mean(.x > 0),
                  "rhat", 
                  "ess_bulk", 
                  "ess_tail") |>
  knitr::kable()  
```

#####Means plot

```{r}
#| label: model_investigations_2_pver
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

pver.protein.means <- pver.proteinSA.brm6 |> 
  emmeans(~treatment, type = 'response') |> 
  as.data.frame()

#make plot that displays mean and HDCI
pver_protein_plot_noraw <- ggplot(pver.protein.means, aes(x=factor(treatment, level = level_order_new), y = emmean, colour = treatment)) +  
  geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD), fatten = 5) + 
  theme_classic() +
  theme(legend.position = "none", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
axis.text.x = element_text(angle = 45, 
                                  vjust =1, 
                                   hjust = 1,
                                   colour = "black")) +
  scale_x_discrete(expression(""), 
                   breaks = waiver(), 
                   labels = stringr::str_wrap(level_order_new_nams, 9)) + 
  scale_y_continuous(expression(Protein~(Âµg~cm^-2)), 
                     limits = c(200, 500)) + 
  scale_colour_manual(values=group.colors)
```

#####Pairwise investigations (Murray code)

```{r}
#| label: model_investigations_4_pver
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

pver.protein_BCS.pairs <- pver.proteinSA.brm6 |> emmeans(~treatment) |> 
  tidybayes::gather_emmeans_draws() |>  
  group_by(.draw) |> 
  pairs() |> 
  as.data.frame()  

sTreat <- pver.proteinSA.brm6$data |> pull(treatment) |> levels()
STreat <- rep(1, length(sTreat))
names(STreat) <- sTreat
pver.proteinSA.brm6 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = (.value)) |> 
  pull(.value) -> x
x %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))


pver.proteinSA.brm6 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = .value) |> 
  #filter(.draw == 1, month == 1) |> 
  ungroup() |>
  group_by(.draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))))) |> 
  unnest(fit) |> 
  group_by(contrast) |> 
  summarise(median_hdci(fit),
            Pl = mean(fit<0),
            Pg = mean(fit>0)) 
#absolute difference between the treatments

pver.proteinSA.brm6 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = log((.value))) |> 
  #filter(.draw == 1, month == 1) |> 
  ungroup() |>
  group_by(.draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = exp(t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey")))))) |> 
  unnest(fit) |> 
  group_by(contrast) |> 
  summarise(median_hdci(fit),
            Pl = mean(fit<1),
            Pg = mean(fit>1))  -> pver_PSA_pwratios
#this is the ratio of one treatment to another 
```

#Aten 
## Fit the model
###Treatment + tank model 
####Priors model

```{r}
#| label: tank_rand_model_1_aten
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

aten.proteinSA.form2 <- bf(protein_ugSA ~ treatment + (1|tank_rep_rand), family = gaussian()) 

priors <- prior(normal(292, 42), class = 'Intercept') + 
  prior(normal(0, 180), class = 'b') + 
  prior(student_t(3, 0, 42), 'sigma') + 
  prior(student_t(3, 0, 42), class = 'sd')

aten.proteinSA.brm3 <- brm(aten.proteinSA.form2, 
                 data = zoox_aten,
                 prior = priors, 
                 sample_prior = 'only',
                 iter = 7000, 
                 warmup = 2500, 
                 chains = 3, cores = 3, 
                 thin = 5, 
                 refresh = 0, 
                 seed = 123, 
                 control = list(adapt_delta = 0.99),
                 backend = "cmdstan") 

aten.proteinSA.brm3 |> conditional_effects("treatment") |> plot(points = TRUE)   
#OK 
```

####With data

```{r}
#| label: tank_rand_model_2_aten
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

aten.proteinSA.brm4 <- aten.proteinSA.brm3 |> update(sample_prior = "yes",
                                       refresh = 0,
                                       control = list(adapt_delta = 0.99),
                                       seed = 123) 

aten.proteinSA.brm4 |> conditional_effects("treatment") |> plot(points = TRUE)
#OK
```

####MCMC sampling diagnostics

```{r}
#| label: tank_rand_model_3_aten
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: true 
pars <- aten.proteinSA.brm4 |> get_variables()
pars_2 <- str_extract(pars, '^b_.*|^sigma$') |> na.omit() 

#Traceplots
aten.proteinSA.brm4$fit |> stan_trace(pars = pars_2, inc_warmup = TRUE)
#good 

#Autocorrelation
aten.proteinSA.brm4$fit |> stan_ac(pars = pars_2) 
#good

#Rhat
aten.proteinSA.brm4$fit |> stan_rhat()
#good

#ESS
aten.proteinSA.brm4$fit |> stan_ess() 
#good

summary(aten.proteinSA.brm4) 
#Fish ESS low, run with more iterations

```

####Posterior probablity checks

```{r}
#| label: tank_rand_model_4_aten
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

aten.proteinSA.brm4 |> pp_check(type = 'dens_overlay', ndraws = 200) + theme_classic()
#OK
```

####DHARMA residuals

```{r}
#| label: tank_rand_model_5_aten
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

coral.resids <- make_brms_dharma_res(aten.proteinSA.brm4, integerResponse = FALSE)

wrap_elements(~testUniformity(coral.resids)) + 
  #wrap_elements(~plotResiduals(coral.resids, form = factor(rep(1, nrow(zoox_pver))))) +
  wrap_elements(~plotResiduals(coral.resids, quantreg = FALSE)) +
  wrap_elements(~testDispersion(coral.resids))

#NAs due to missing samples, so run without boxplot
#Looks good
```

###Model Investigations #####Summary

```{r}
#| label: model_investigations_1_aten
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

aten.proteinSA.brm4 |> 
  as_draws_df() |> 
  dplyr::select(matches('^b_.*|^sigma$|^sd.*')) |> 
  summarise_draws(median, 
                  ~ HDInterval::hdi(.x, .width = 0.95),  
                  Pl = ~ mean(.x < 0), 
                  Pg = ~ mean(.x > 0),
                  "rhat", 
                  "ess_bulk", 
                  "ess_tail") |>
  knitr::kable()  
```

#####Means plot

```{r}
#| label: model_investigations_2_aten
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true
load("../models/aten.proteinSA.brm4.RData")

aten.protein.means <- aten.proteinSA.brm4 |> 
  emmeans(~treatment, type = 'response') |> 
  as.data.frame()

(aten.protein.means) 

#make plot that displays mean and HDCI
aten_protein_plot <- ggplot(aten.protein.means, aes(x=factor(treatment, level = level_order_new), y = emmean, colour = treatment)) +  
  geom_point(data = zoox_aten, aes(x = factor(treatment, level = level_order_new), y = protein_ugSA), colour = "black", alpha = 0.5, size = 0.5, position = position_jitter(w = 0.1, h = 0)) +
  geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD), fatten = 5) + 
  theme_classic() +
  theme(legend.position = "none", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
        axis.text.x = element_text(colour = "black")) +
  scale_x_discrete(expression(Treatment), 
                   breaks = waiver(), 
                   labels = level_order_new) + 
  scale_y_continuous(expression(Protein~(Âµg~cm^-2))) + 
  scale_colour_manual(values=group.colors)  
  # ggplot2::annotate(geom = "text", 
  #                   label = expression(italic("Acropora kenti")), 
  #                   size = 5, 
  #                   x = 0.5, 
  #                   y = Inf, 
  #                   hjust = 0, 
  #                   vjust = 1)

aten_protein_plot 

aten_protein_plot_noraw <- ggplot(aten.protein.means, aes(x=factor(treatment, level = level_order_new), y = emmean, colour = treatment)) +  
  geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD), fatten = 5) + 
  theme_classic() +
  theme(legend.position = "none", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
axis.text.x = element_text(angle = 45, 
                                  vjust =1, 
                                   hjust = 1,
                                   colour = "black")) +
  scale_x_discrete(expression(""), 
                   breaks = waiver(), 
                   labels = stringr::str_wrap(level_order_new_nams, 9)) + 
  scale_y_continuous(expression(Protein~(Âµg~cm^-2)), 
                     limits = c(190, 400)) + 
  scale_colour_manual(values=group.colors)
aten_protein_plot_noraw
```

#####Pairwise investigations (Murray code)

```{r}
#| label: model_investigations_4_aten
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

sTreat <- aten.proteinSA.brm4$data |> pull(treatment) |> levels()
STreat <- rep(1, length(sTreat))
names(STreat) <- sTreat
aten.proteinSA.brm4 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = (.value)) |> 
  pull(.value) -> x
x %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))


aten.proteinSA.brm4 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = .value) |> 
  #filter(.draw == 1, month == 1) |> 
  ungroup() |>
  group_by(.draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))))) |> 
  unnest(fit) |> 
  group_by(contrast) |> 
  summarise(median_hdci(fit),
            Pl = mean(fit<0),
            Pg = mean(fit>0)) 
#absolute difference between the treatments

aten.proteinSA.brm4 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = log((.value))) |> 
  #filter(.draw == 1, month == 1) |> 
  ungroup() |>
  group_by(.draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = exp(t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey")))))) |> 
  unnest(fit) |> 
  group_by(contrast) |> 
  summarise(median_hdci(fit),
            Pl = mean(fit<1),
            Pg = mean(fit>1))  
#this is the ratio of one treatment to another 

#not quite the same as the results from the emmeans |> pairs, because this is 
```

#####Contrast matrix

```{r}
#| label: model_investigations_3_aten
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

Cmat <- cbind('Dissolved vs Fish' = c(0, 1, 0, -1, 0, 0, 0, 0),
          'LiveFeeds vs Mix' = c(0, 0, 0, 0, 1, -1, 0, 0), 
          'Fish in tank vs Dissolved' = c(0, -1, 0, 1/2, 0, 1/2, 0, 0), 
          'Field vs Any Captive Longterm' = c(1/6, 1/6, -1, 1/6, 1/6, 1/6, 1/6, 0), 
          'SeaSim vs LiveFeeds' = c(0, 0, 0, 0, 1, 0, 0, -1)) 

#remember for contrast, the one that +ve in the matrix (write as first in the contrast) will be the one used as reference (e.g. live vs Mix (1, -1), is live - mix in the contrast)
aten.proteinSA.brm4 |> 
  emmeans(~treatment, type = 'response') |> 
  contrast(method = list(treatment = Cmat)) |> 
  gather_emmeans_draws() |>
  mutate(Fit = (.value)) |> 
  summarise(median_hdci(Fit), 
            Pl = mean(Fit < 0), 
            Pg = mean(Fit > 0)) 
```

#Plut \## Exploratory data analysis

```{r}
#| label: data_intro_plut
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true 

ggplot(zoox_plut, aes(y= protein_ugSA, x = treatment, fill = treatment)) + 
  geom_boxplot() + 
  facet_grid(~genotype)  

#guassian assumptions 
#normality, equal variance, independence (we know there a problem, but we will model that in), linearity) 
#genotype has a strong effect on protein!
```

## Fit the model

###Simple model ####Priors model

```{r}
#| label: simple_model_1_plut
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true


plut.proteinSA.form1 <- bf(protein_ugSA ~ treatment, family = gaussian())

#get_prior(plut.proteinSA.form1, data = zoox_plut)

zoox_plut |> group_by(treatment) |> summarise(median((protein_ugSA)), mad((protein_ugSA))) 

priors <- prior(normal(514, 160), class = 'Intercept') + 
  prior(normal(0, 1600), class = 'b') + 
  prior(student_t(3, 0, 160), 'sigma')

plut.proteinSA.brm1 <- brm(plut.proteinSA.form1, 
                 data = zoox_plut,
                 prior = priors, 
                 sample_prior = 'only',
                 iter = 5000, 
                 warmup = 2500, 
                 chains = 3, cores = 3, 
                 thin = 5, 
                 refresh = 0, 
                 seed = 123, 
                 backend = "cmdstan") 

plut.proteinSA.brm1 |> conditional_effects() |> plot(points = TRUE)  
#OK
```

####With data

```{r}
#| label: simple_model_2_plut
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

plut.proteinSA.brm2 <- plut.proteinSA.brm1 |> update(sample_prior = "yes",
                                       refresh = 0,
                                       seed = 123) 

plut.proteinSA.brm2 |> conditional_effects() |> plot(points = TRUE)  
#pver.proteinSA.brm2 |> SUYR_prior_and_posterior() 
#seems good
```

####DHARMA residuals

```{r}
#| label: simple_model_3_plut
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

coral.resids <- make_brms_dharma_res(plut.proteinSA.brm2, integerResponse = FALSE)

wrap_elements(~testUniformity(coral.resids)) + 
  wrap_elements(~plotResiduals(coral.resids, form = factor(rep(1, nrow(zoox_aten))))) +
  wrap_elements(~plotResiduals(coral.resids, quantreg = FALSE)) +
  wrap_elements(~testDispersion(coral.resids))
#QQ and res vs pred not great - need random effect or different link function
```

###Treatment + tank random model ####Priors model

```{r}
#| label: tank_rand_model_1_plut
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

plut.proteinSA.form2 <- bf(protein_ugSA ~ treatment + (1|tank_rep_rand), family = Gamma(link = "log")) 
#plut.proteinSA.form2 <- bf(protein_ugSA ~ treatment + (1|tank_rep_rand), family = gaussian(link = "log")) 
#plut.proteinSA.form2 <- bf(protein_ugSA ~ treatment + (1|genotype), family = gaussian(link = "log")) 

zoox_plut |> group_by(treatment:genotype) |> summarise(median((log(protein_ugSA))), mad((log(protein_ugSA)))) 

priors <- prior(normal(7, 0.8), class = 'Intercept') + 
  prior(normal(0, 1), class = 'b') +
  prior(student_t(3, 0, 0.6), class = 'sd') + 
  #prior(student_t(3, 0, 0.4), class = 'sigma') 
  prior(gamma(0.01, 0.01), class = 'shape')

# priors <- prior(normal(7, 0.4), class = 'Intercept') + 
#  prior(normal(0, 2), class = 'b') + 
#   prior(student_t(3, 0, 0.4), 'sigma') + 
#   prior(student_t(3, 0, 0.4), class = 'sd')

plut.proteinSA.brm3 <- brm(plut.proteinSA.form2, 
                 data = zoox_plut,
                 prior = priors, 
                 sample_prior = 'only',
                 iter = 8000, 
                 warmup = 2500, 
                 chains = 3, cores = 3, 
                 thin = 10, 
                 refresh = 0, 
                 seed = 123, 
                 control = list(adapt_delta = 0.99),
                 backend = "cmdstan") 

plut.proteinSA.brm3 |> conditional_effects("treatment") |> plot(points = TRUE)   
#OK 

```

####With data

```{r}
#| label: tank_rand_model_2_plut
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

plut.proteinSA.brm4 <- plut.proteinSA.brm3 |> update(sample_prior = "yes",
                                       refresh = 0,
                                       control = list(adapt_delta = 0.99),
                                       seed = 123) 

plut.proteinSA.brm4 |> conditional_effects("treatment") |> plot(points = TRUE)
#OK

save(plut.proteinSA.brm4, file = "../models/plut.proteinSA.brm4.RData")
load("../models/plut.proteinSA.brm4.RData")

#pver.proteinSA.brm6 |> SUYR_prior_and_posterior() |> plot() 
```

####MCMC sampling diagnostics

```{r}
#| label: tank_rand_model_3_plut
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: true 
pars <- plut.proteinSA.brm4 |> get_variables()
pars_2 <- str_extract(pars, '^b_.*|^sd_.*|^shape.*|^sigma$') |> na.omit() 
#pars_3 <- str_extract(pars, '^sigma$') |> na.omit() 

#Traceplots
plut.proteinSA.brm4$fit |> stan_trace(pars = pars_2, inc_warmup = TRUE)
#good 

#Autocorrelation
plut.proteinSA.brm4$fit |> stan_ac(pars = pars_2) 
#plut.proteinSA.brm4$fit |> stan_ac(pars = pars_3) 
#sigma high, run with more iterations and higher thinning
#fixed it, now good 

#Rhat
plut.proteinSA.brm4$fit |> stan_rhat()
#good

#ESS
plut.proteinSA.brm4$fit |> stan_ess() 
#good

summary(plut.proteinSA.brm4) 
#OK

```

####Posterior probablity checks

```{r}
#| label: tank_rand_model_4_plut
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

plut.proteinSA.brm4 |> pp_check(type = 'dens_overlay', ndraws = 200) + theme_classic()
#OK
#Not good! Tried with identity link with 1|geno or 1|tank

#Better with log link and 1|tank, but still missing some bits
#about the same with geno rand effect 

#model may be slightly over-estimating the protein due to the high outliers

#Better with Gamma with log link! 
```

####DHARMA residuals

```{r}
#| label: tank_rand_model_5_plut
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

coral.resids <- make_brms_dharma_res(plut.proteinSA.brm4, integerResponse = FALSE)

wrap_elements(~testUniformity(coral.resids)) + 
  wrap_elements(~plotResiduals(coral.resids, form = factor(rep(1, nrow(zoox_plut))))) +
  wrap_elements(~plotResiduals(coral.resids, quantreg = FALSE)) +
  wrap_elements(~testDispersion(coral.resids))

#Residuals not good - refit with log link/try with genotype as random factor
#better with log link, but still getting a pattern... try fitting with log link and 1|geno
#still not good, go back to tank rand eff
#Looks OK with 1|tank and log link

#With Gamma link function and log link looks much better
```

###Model Investigations #####Summary

```{r}
#| label: model_investigations_1_plut
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

plut.proteinSA.brm4 |> 
  as_draws_df() |> 
  dplyr::select(matches('^b_.*|^sigma$|^sd.*')) |> 
  mutate(across(everything(), exp)) |> 
  summarise_draws(median, 
                  ~ HDInterval::hdi(.x, .width = 0.95),  
                  Pl = ~ mean(.x < 1), 
                  Pg = ~ mean(.x > 1),
                  "rhat", 
                  "ess_bulk", 
                  "ess_tail") |>
  knitr::kable()  
```

#####Means plot

```{r}
#| label: model_investigations_2_plut
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

plut.protein.means <- plut.proteinSA.brm4 |> 
  emmeans(~treatment, type = 'response') |> 
  as.data.frame()

(plut.protein.means) 

#make plot that displays mean and HDCI
plut_protein_plot <- ggplot(plut.protein.means, aes(x=factor(treatment, level = level_order_new), y = response, colour = treatment)) +  
  geom_point(data = zoox_plut, aes(x = factor(treatment, level = level_order_new), y = protein_ugSA), colour = "black", alpha = 0.5, size = 0.5, position = position_jitter(w = 0.1, h = 0)) +
  geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD), fatten = 5) + 
  theme_classic() +
  theme(legend.position = "none", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
        axis.text.x = element_text(colour = "black")) +
  scale_x_discrete(expression(Treatment), 
                   breaks = waiver(), 
                   labels = level_order_new) + 
  scale_y_continuous(expression(Protein~(Âµg~cm^-2))) + 
  scale_colour_manual(values=group.colors)   
  # ggplot2::annotate(geom = "text", 
  #                   label = expression(italic("Porites lutea")), 
  #                   size = 5, 
  #                   x = 0.5, 
  #                   y = Inf, 
  #                   hjust = 0, 
  #                   vjust = 1)

 plut_protein_plot 
#genotype 1 has high protein - often is outlier... discuss/remove?
#colour = "black", 
 
plut_protein_plot_noraw <- ggplot(plut.protein.means, aes(x=factor(treatment, level = level_order_new), y = response, colour = treatment)) +  
  geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD), fatten = 5) + 
  theme_classic() +
  theme(legend.position = "none", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
axis.text.x = element_text(angle = 45, 
                                  vjust =1, 
                                   hjust = 1,
                                   colour = "black")) +
  scale_x_discrete(expression(""), 
                   breaks = waiver(), 
                   labels = stringr::str_wrap(level_order_new_nams, 9)) + 
  scale_y_continuous(expression(Protein~(Âµg~cm^-2)), 
                     limits = c(400, 2500)) + 
  scale_colour_manual(values=group.colors)
plut_protein_plot_noraw
```

#####Pairwise investigations (Murray code)

```{r}
#| label: model_investigations_4_plut
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

sTreat <- plut.proteinSA.brm4$data |> pull(treatment) |> levels()
STreat <- rep(1, length(sTreat))
names(STreat) <- sTreat
plut.proteinSA.brm4 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = (.value)) |> 
  pull(.value) -> x
x %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))


plut.proteinSA.brm4 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = exp(.value)) |> 
  #filter(month == 3) |> 
  ungroup() |>
  group_by(.draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))))) |> 
  unnest(fit) |> 
  group_by(contrast) |> 
  summarise(median_hdci(fit),
            Pl = mean(fit<0),
            Pg = mean(fit>0)) 
#absolute difference between the treatments
```

#####Contrast matrix

```{r}
#| label: model_investigations_3_plut
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

Cmat <- cbind('Dissolved vs Fish' = c(0, 1, 0, -1, 0, 0, 0, 0),
          'LiveFeeds vs Mix' = c(0, 0, 0, 0, 1, -1, 0, 0), 
          'Fish in tank vs Dissolved' = c(0, -1, 0, 1/2, 0, 1/2, 0, 0), 
          'Field vs Any Captive Longterm' = c(1/6, 1/6, -1, 1/6, 1/6, 1/6, 1/6, 0), 
          'SeaSim vs LiveFeeds' = c(0, 0, 0, 0, 1, 0, 0, -1)) 

#remember for contrast, the one that +ve in the matrix (write as first in the contrast) will be the one used as reference (e.g. live vs Mix (1, -1), is live - mix in the contrast)
plut.proteinSA.brm4 |> 
  emmeans(~treatment, type = 'response') |> 
  contrast(method = list(treatment = Cmat)) |> 
  gather_emmeans_draws() |>
  mutate(Fit = exp(.value)) |> 
  summarise(median_hdci(Fit), 
            Pl = mean(Fit < 1), 
            Pg = mean(Fit > 1)) 
```

#Pdae \## Exploratory data analysis

```{r}
#| label: data_intro_pdae
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true 

ggplot(zoox_pdae, aes(y= protein_ugSA, x = treatment, fill = treatment)) + 
  geom_boxplot() + 
  facet_grid(~genotype)  

#guassian assumptions 
#normality, equal variance, independence (we know there a problem, but we will model that in), linearity) 
#genotype has a strong effect on protein!
```

## Fit the model

###Simple model ####Priors model

```{r}
#| label: simple_model_1_pdae
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true


pdae.proteinSA.form1 <- bf(protein_ugSA ~ treatment, family = gaussian())

zoox_pdae |> group_by(treatment) |> summarise(median((protein_ugSA)), mad((protein_ugSA))) 

priors <- prior(normal(504, 89), class = 'Intercept') + 
  prior(normal(0, 350), class = 'b') + 
  prior(student_t(3, 0, 89), 'sigma')

pdae.proteinSA.brm1 <- brm(pdae.proteinSA.form1, 
                 data = zoox_pdae,
                 prior = priors, 
                 sample_prior = 'only',
                 iter = 5000, 
                 warmup = 2500, 
                 chains = 3, cores = 3, 
                 thin = 5, 
                 refresh = 0, 
                 seed = 123, 
                 backend = "cmdstan") 

pdae.proteinSA.brm1 |> conditional_effects() |> plot(points = TRUE)  
#OK
```

####With data

```{r}
#| label: simple_model_2_pdae
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

pdae.proteinSA.brm2 <- pdae.proteinSA.brm1 |> update(sample_prior = "yes",
                                       refresh = 0,
                                       seed = 123) 

pdae.proteinSA.brm2 |> conditional_effects() |> plot(points = TRUE)  
#pver.proteinSA.brm2 |> SUYR_prior_and_posterior() 
#seems good
```

####DHARMA residuals

```{r}
#| label: simple_model_3_pdae
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

coral.resids <- make_brms_dharma_res(pdae.proteinSA.brm2, integerResponse = FALSE)

wrap_elements(~testUniformity(coral.resids)) + 
  wrap_elements(~plotResiduals(coral.resids, form = factor(rep(1, nrow(zoox_pdae))))) +
  wrap_elements(~plotResiduals(coral.resids, quantreg = FALSE)) +
  wrap_elements(~testDispersion(coral.resids))
#Looks good
```

###Treatment + tank random model ####Priors model

```{r}
#| label: tank_rand_model_1_pdae
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

pdae.proteinSA.form2 <- bf(protein_ugSA ~ treatment + (1|tank_rep_rand), family = gaussian()) 

zoox_pdae |> group_by(treatment:tank_rep_rand) |> summarise(median(protein_ugSA), mad(protein_ugSA)) 

priors <- prior(normal(484, 160), class = 'Intercept') + 
  prior(normal(0, 700), class = 'b') +
  prior(student_t(3, 0, 160), 'sigma') + 
  prior(student_t(3, 0, 160), class = 'sd') 

pdae.proteinSA.brm3 <- brm(pdae.proteinSA.form2, 
                 data = zoox_pdae,
                 prior = priors, 
                 sample_prior = 'only',
                 iter = 10000, 
                 warmup = 2500, 
                 chains = 3, cores = 3, 
                 thin = 10, 
                 refresh = 0, 
                 seed = 123, 
                 control = list(adapt_delta = 0.99),
                 backend = "cmdstan") 

pdae.proteinSA.brm3 |> conditional_effects("treatment") |> plot(points = TRUE)   
#OK 
```

####With data

```{r}
#| label: tank_rand_model_2_pdae
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

pdae.proteinSA.brm4 <- pdae.proteinSA.brm3 |> update(sample_prior = "yes",
                                       refresh = 0,
                                       control = list(adapt_delta = 0.99),
                                       seed = 123) 

pdae.proteinSA.brm4 |> conditional_effects("treatment") |> plot(points = TRUE)
#OK
save(pdae.proteinSA.brm4, file = "../models/pdae.proteinSA.brm4.RData")
load("../models/pdae.proteinSA.brm4.RData")

#pver.proteinSA.brm6 |> SUYR_prior_and_posterior() |> plot() 
```

####MCMC sampling diagnostics

```{r}
#| label: tank_rand_model_3_pdae
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: true 
pars <- pdae.proteinSA.brm4 |> get_variables()
pars_2 <- str_extract(pars, '^b_.*|^sigma$') |> na.omit() 
pars_3 <- str_extract(pars, '^sigma$') |> na.omit() 

#Traceplots
pdae.proteinSA.brm4$fit |> stan_trace(pars = pars_2, inc_warmup = TRUE)
#good 

#Autocorrelation
pdae.proteinSA.brm4$fit |> stan_ac(pars = pars_2) 
pdae.proteinSA.brm4$fit |> stan_ac(pars = pars_3) 
#sigma high, run with more iterations and higher thinning
#fixed it, now good 

#Rhat
pdae.proteinSA.brm4$fit |> stan_rhat()
#good

#ESS
pdae.proteinSA.brm4$fit |> stan_ess() 
#good

summary(pdae.proteinSA.brm4) 
#OK

```

####Posterior probablity checks

```{r}
#| label: tank_rand_model_4_pdae
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

pdae.proteinSA.brm4 |> pp_check(type = 'dens_overlay', ndraws = 200) + theme_classic()
#OK
```

####DHARMA residuals

```{r}
#| label: tank_rand_model_5_pdae
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

coral.resids <- make_brms_dharma_res(pdae.proteinSA.brm4, integerResponse = FALSE)

wrap_elements(~testUniformity(coral.resids)) + 
  wrap_elements(~plotResiduals(coral.resids, form = factor(rep(1, nrow(zoox_pdae))))) +
  wrap_elements(~plotResiduals(coral.resids, quantreg = FALSE)) +
  wrap_elements(~testDispersion(coral.resids))
#Good
```

###Model Investigations #####Summary

```{r}
#| label: model_investigations_1_pdae
#| output: true
#| eval: true
#| warning: false
#| message: false
#| cache: true

pdae.proteinSA.brm4 |> 
  as_draws_df() |> 
  dplyr::select(matches('^b_.*|^sigma$|^sd.*')) |> 
  summarise_draws(median, 
                  ~ HDInterval::hdi(.x, .width = 0.95),  
                  Pl = ~ mean(.x < 0), 
                  Pg = ~ mean(.x > 0),
                  "rhat", 
                  "ess_bulk", 
                  "ess_tail") |>
  knitr::kable()  
```

#####Means plot

```{r}
#| label: model_investigations_2_pdae
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true
load("../models/pdae.proteinSA.brm4.RData")

pdae.protein.means <- pdae.proteinSA.brm4 |> 
  emmeans(~treatment, type = 'response') |> 
  as.data.frame()

(pdae.protein.means) 

#make plot that displays mean and HDCI
pdae_protein_plot <- ggplot(pdae.protein.means, aes(x=factor(treatment, level = level_order_new), y = emmean, colour = treatment)) +  
  geom_point(data = zoox_pdae, aes(x = factor(treatment, level = level_order_new), y = protein_ugSA), colour = "black", alpha = 0.5, size = 0.5, position = position_jitter(w = 0.1, h = 0)) +
  geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD), fatten = 5) + 
  theme_classic() +
  theme(legend.position = "none", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
        axis.text.x = element_text(colour = "black")) +
  scale_x_discrete(expression(""), 
                   breaks = waiver(), 
                   labels = level_order_new) + 
  scale_y_continuous(expression(Protein~(Âµg~cm^-2)), 
                     limits = c(250, 900), 
                     breaks = c(300, 400, 500, 600, 700, 800, 900)) + 
  scale_colour_manual(values=group.colors) 
  # ggplot2::annotate(geom = "text", 
  #                   label = expression(italic("Platygyra daedalea")), 
  #                   size = 5, 
  #                   x = 0.5, 
  #                   y = Inf, 
  #                   hjust = 0, 
  #                   vjust = 1)

 pdae_protein_plot 
#genotype 1 has high protein - often is outlier... discuss/remove?

pdae_protein_plot_noraw <- ggplot(pdae.protein.means, aes(x=factor(treatment, level = level_order_new), y = emmean, colour = treatment)) +  
  geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD), fatten = 5) + 
  theme_classic() +
  theme(legend.position = "none", 
        text = element_text(size=15),
        axis.text.y = element_text(colour = "black"), 
axis.text.x = element_text(angle = 45, 
                                  vjust =1, 
                                   hjust = 1,
                                   colour = "black")) +
    scale_x_discrete(expression(""), 
                   breaks = waiver(), 
                   labels = stringr::str_wrap(level_order_new_nams, 9)) + 
  scale_y_continuous(expression(Protein~(Âµg~cm^-2)), 
                     limits = c(300, 900)) + 
  scale_colour_manual(values=group.colors)
pdae_protein_plot_noraw
```

#####Pairwise investigations (Murray code)

```{r}
#| label: model_investigations_4_pdae
#| output: true
#| eval: true 
#| warning: false
#| message: false
#| cache: true

sTreat <- pdae.proteinSA.brm4$data |> pull(treatment) |> levels()
STreat <- rep(1, length(sTreat))
names(STreat) <- sTreat
pdae.proteinSA.brm4 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = (.value)) |> 
  pull(.value) -> x
x %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))


pdae.proteinSA.brm4 |> emmeans(~treatment) |> 
  gather_emmeans_draws() |>  
  mutate(.value = (.value)) |> 
  #filter(month == 3) |> 
  ungroup() |>
  group_by(.draw) |> 
  reframe(fit = data.frame(contrast = rownames(multcomp::contrMat(n = STreat, type = "Tukey")), 
                           fit = t(as.vector(.value) %*% t(multcomp::contrMat(n = STreat, type = "Tukey"))))) |> 
  unnest(fit) |> 
  group_by(contrast) |> 
  summarise(median_hdci(fit),
            Pl = mean(fit<0),
            Pg = mean(fit>0)) 
#absolute difference between the treatments
```
